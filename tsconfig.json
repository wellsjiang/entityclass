{
  "compilerOptions": {
    /* Basic Options */
    "target": "es6", /*指定ECMAScript目标版本：“ES3”（默认）、“ES5”、“ES2015”、“ES2016”、“ES2017”、“ES2018”或“ESBEXT”。*/
    "module": "commonjs", /* 指定模块代码生成： 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    // "lib": [],                             /* 指定要包含在编译中的库文件 */
    // "allowJs": true,                       /*允许编译JavaScript文件*/
    // "checkJs": true,                       /* 报告错误 */
    // "jsx": "preserve",                     /* 指定JSX代码生成： 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* 生成相应的.d.ts文件 */
    // "declarationMap": true,                /* 为每个对应的.d.ts文件生成sourcemap*/
    "sourceMap": true,                     /* 生成相应的“.map”文件 */
    // "outFile": "./",                       /* 级联并将输出输出到单个文件 */
    "outDir": "./src", /* 重定向输出结构到目录 */
    "rootDir": "./build",                       /* 指定输入文件的根目录。用于使用Outdir控制输出目录结构 */
    // "composite": true,                     /* 启用项目编译 */
    // "removeComments": true,                /* 不向输出发出注释 */
    // "noEmit": true,                        /* 不输出输出 */
    // "importHelpers": true,                 /* 导入从'tslib'输出帮助器*/
    // "downlevelIteration": true,            /* 在“ES5”或“ES3”时，为“迭代”、扩展和破坏提供完整的迭代支持*/
    // "isolatedModules": true,               /* 将每个文件作为单独的模块(similar to 'ts.transpileModule'). */
    /* 严格的类型检查选项 */
    "strict": true, /* 启用所有严格类型检查选项*/
    // "noImplicitAny": true,                 /* 在表达式和声明中加上隐含的“any”类型引发错误*/
    // "strictNullChecks": true,              /* 允许严格的空校验 */
    // "strictFunctionTypes": true,           /* 允许对函数类型进行严格检查 */
    // "strictPropertyInitialization": true,  /* 允许在类中严格检查属性初始化 */
    // "noImplicitThis": true,                /* 在'this' 表达式上加上一个隐含的“any”类型*/
    // "alwaysStrict": true,                  /* 以严格模式解析，并为每个源文件输出"use strict"*/
    /* Additional Checks */
    // "noUnusedLocals": true,                /* 报告未使用本地的错误 */
    // "noUnusedParameters": true,            /* 对未使用的参数报告错误 */
    // "noImplicitReturns": true,             /* 报告错误，当不是函数中的所有代码路径返回一个值时 */
    // "noFallthroughCasesInSwitch": true,    /* 报告错误，用于切换语句中的FALSE情况 */
    /* 模块分辨率选项 */
    // "moduleResolution": "node",            /* 指定模块解决策略: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* 基目录，用于解析非绝对模块名 */
    // "paths": {},                           /* 一系列条目，它们将映射重新映射到相对于“BaseURL”的查找位置 */
    // "rootDirs": [],                        /* 根文件夹，其组合内容表示运行时项目的结构 */
    // "typeRoots": [],                       /*文件夹列表，其中包含类型定义 */
    // "types": [],                           /* 类型的声明文件将包含在编译中 */
    // "allowSyntheticDefaultImports": true,  /* 允许缺省的模块导入，没有默认导出。这并不影响代码发出，只是类型检查。*/
    "esModuleInterop": true /* 允许通过为所有导入创建命名空间对象来发出公共模块和ES模块之间的互操作性。意味着 Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    /* 源映射选项 */
    // "sourceRoot": "./",                    /*指定调试器应定位TysScript文件而不是源位置的位置。*/
    // "mapRoot": "./",                       /* 指定调试器应定位MAP文件而不是生成的位置的位置 */
    // "inlineSourceMap": true,               /* 用源映射发出单个文件，而不是单独的文件 */
    // "inlineSources": true,                 /* 在单个文件中发出源代码旁边的源；需要设置 '--inlineSourceMap' or '--sourceMap' to be set. */
    /* 实验选项 */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  }
}